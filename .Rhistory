#2-11
st['Texas', 'Area']
#문2)
#2-1
data()
st = data.frame(state.x77)
#2-11
st['Texas', 'Area']
st <- subset(st['Texas',],select = "Population"); st
#2-20
rownames(subset(st, Life.Exp == apply(st['Life.Exp'], 2, max) ) )
#2-20
rownames(subset(st, Life.Exp == apply(st['Life.Exp'], 2, max) ) )
#2-13
subset(st, Population >= 5000 )
#2-14
subset(st, Income >= 4500, c('Population', 'Income', 'Area') )
#2-15
nrow( subset(st, Income >= 4500) )
#2-15
nrow( subset(st, Income >= 4500) )
#2-14
subset(st, Income >= 4500, c('Population', 'Income', 'Area') )
#2-13
subset(st, Population >= 5000 )
#2-14
subset(st, Income >= 4500, c('Population', 'Income', 'Area') )
#2-12
st['Ohio', c('Population', 'Income')]
#2-12
st['Ohio', c('Population', 'Income')]
#2-9
st['Florida', ]
#2-10
st[, 'Income' ]
#2-11
st['Texas', 'Area']
#2-6
str(st)
#2-7
apply(st, 1, sum)
apply(st, 1, mean)
#2-8
apply(st, 2, sum)
apply(st, 2, mean)
apply(st, 2, mean)
#2-2
st
st = data.frame(state.x77)
#2-2
st
#2-7
apply(st, 1, sum)
apply(st, 1, mean)
#2-8
apply(st, 2, sum)
#2-9
st['Florida', ]
#2-10
st[, 'Income' ]
#2-11
st['Texas', 'Area']
#2-12
st['Ohio', c('Population', 'Income')]
#2-13
subset(st, Population >= 5000 )
#2-14
subset(st, Income >= 4500, c('Population', 'Income', 'Area') )
#2-15
nrow( subset(st, Income >= 4500) )
#2-16
subset( st, Area >=100000 & Frost >= 120 )
apply(st, 2, mean)
#2-9
# Florida 주의 모든 정보 출력
st['Florida', ]
#2-10
# 50개 주의 수입(Income) 정보만 출력
st[, 'Income' ]
#2-9
# Florida 주의 모든 정보 출력
st['Florida', ]
#2-10
# 50개 주의 수입(Income) 정보만 출력
st[, 'Income' ]
#2-11
st['Texas', 'Area']
#2-12
# Ohio 주의 인구(Population)와 수입(Income) 출력
st['Ohio', c('Population', 'Income')]
#2-13
# 인구가 5,000 이상인 주의 데이터만 출력
subset(st, Population >= 5000 )
table( iris[, 'Species' ] )             ### 데이터 조건부 카운트 조회
str( iris )                   ## 자료구조 조회(자료타입,행열크기, 변수타입..)
unique( iris[ , 5 ] )# 집합 원소 추출
table( iris[, 'Species' ] )             ### 데이터 조건부 카운트 조회
#2-16
# 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset( st, Area >=100000 & Frost >= 120 )
#2-15
# 수입이 4,500 이상인 주는 몇 개인지 출력
nrow( subset(st, Income >= 4500) )
#2-15
# 수입이 4,500 이상인 주는 몇 개인지 출력
table( subset(st, Income >= 4500) )
#2-15
# 수입이 4,500 이상인 주는 몇 개인지 출력
table( subset(st, Income >= 4500) )
subset(st, Income >= 4500)
nrow
#2-15
# 수입이 4,500 이상인 주는 몇 개인지 출력
nrow( subset(st, Income >= 4500) )
#2-16
# 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보 출력
subset( st, Area >=100000 & Frost >= 120 )
#2-17
# 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12미만인 주의 정보 출력
subset( st, Population < 2000 & Murder < 12 )
#2-18
apply(subset( st, Illiteracy >= 2.0, 'Income'), 2, mean)
#2-19
# 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이 출력
abs( apply(subset(st, Illiteracy < 2.0, 'Income'), 2, mean)
- apply(subset(st, Illiteracy >= 2.0, 'Income'), 2, mean) )
#2-20
rownames(subset(st, Life.Exp == apply(st['Life.Exp'], 2, max) ) )
#2-21
# Pennsylvania 주보다 수입(Income)이 높은 주들 출력
rownames( subset(st, Income > st['Pennsylvania','Income'] ) )
#문3)
#3-1
class(mtcars)
#3-3
# st의 열 이름 출력
colnames(mtcars)
#3-4
# st의 행 이름 출력
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#3-4
# 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
mtcars[gear==4]
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
mtcars['gear'==4]
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
mtcars[,'gear'==4]
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
mtcars[,gear==4]
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
subset(mtcars, gear == 4)
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
subset(mtcars, mpg == apply( subset(mtcars, gear == 4), 2 min ) )
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
subset(mtcars, mpg == apply( subset(mtcars, gear == 4), 2, min ) )
apply( subset(mtcars, gear == 4), 2, min )
subset(mtcars, gear == 4)
subset(mtcars['mpg','gear'], gear == 4)
subset(mtcars['gear'], gear == 4)
subset(mtcars['mpg','gear'], gear == 4)
subset(mtcars['mpg' | 'gear'], gear == 4)
subset(mtcars['mpg' | 'gear'], gear == 4)
subset(mtcars[c('mpg','gear')], gear == 4)
apply( subset(mtcars[c('mpg','gear')], gear == 4), 2, min )
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
subset(mtcars,
mpg == apply( subset(mtcars['mpg','gear'], gear == 4), 2, min ) )
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
subset(mtcars,
mpg == apply( subset(mtcars[c('mpg','gear')], gear == 4), 2, min ) )
#3-4
# 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
rownames(
subset(mtcars,
mpg == apply( subset(mtcars[c('mpg','gear')], gear == 4), 2, min ) )
)
mtcars["Honda Civic"]
mtcars["Honda Civic"]
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars
mtcars["Honda Civic"]
mtcars['Honda Civic'"']
mtcars['Honda Civic']
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars
mtcars['Honda Civic']
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
rownames(
subset(mtcars,
mpg == apply( subset(mtcars[c('mpg','gear')], gear == 4), 2, min ) )
)
#3-4
# 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#3-3
# 이 데이터셋 열들의 자료형 출력
colnames(mtcars)
#3-1
# 이 데이터셋의 자료구조 출력
class(mtcars)
r
score
#3-5
# gear가 4인 자동차 모델 중 연비가 가장 낮은 모델 출력
rownames(
subset(mtcars,
mpg == apply( subset(mtcars[c('mpg','gear')], gear == 4), 2, min ) )
)
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars['Honda Civic']
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars[Honda Civic]
#3-1
# 이 데이터셋의 자료구조 출력
class(mtcars)
#3-4
# 연비(mpg)가 가장 좋은 자동차 모델 출력
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars[Honda Civic]
#3-6
# Honda Civic의 연비(mpg)와 gear 수 출력
mtcars
mtcars['Honda Civic']
mtcars[c('mpg','gear')]
mtcars[, c('mpg','gear')]
mtcars['Fiat 128', c('mpg','gear')]
mtcars['Honda Civic', c('mpg','gear')]
#3-7
# Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
mtcars['Pontiac Firebird','gear']
#3-7
# Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
mtcars['Pontiac Firebird','mpg']
#3-7
# Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
subset(mtcars, mpg > mtcars['Pontiac Firebird','mpg'])
#3-7
# Pontiac Firebird 보다 연비가 좋은 자동차 모델 출력
rownames( subset(mtcars, mpg > mtcars['Pontiac Firebird','mpg'] ) )
#3-8
# 자동차 모델들의 평균 연비 출력
apply(mtcars['mpg'],2,mean)
#3-9
# gear의 수 종류 출력
unique(mtcars['gear'])
mtcars['gear']
#3-9
# gear의 수 종류 출력
unique(mtcars['gear'])
mtcars[,'gear']
#3-9
# gear의 수 종류 출력
unique(mtcars[,'gear'])
#4-1
# 이 데이터셋의 자료구조 출력
str(airquality)
#4-1
# 이 데이터셋의 자료구조 출력
class(airquality)
#4-2
# 이 데이터셋의 앞쪽 일부분 내용만 출력
head(airquality)
#3-8
# 자동차 모델들의 평균 연비 출력
apply(mtcars['mpg'],2,mean)
apply(airquality['Temp'],2,max)
#4-3
# 기온(Temp)이 가장 높은 날은 언제인지 월(Month)과 일(Day) 출력
subset(airquality, Temp == apply(airquality['Temp'],2,max) )
#4-3
# 기온(Temp)이 가장 높은 날은 언제인지 월(Month)과 일(Day) 출력
subset(airquality, Temp == apply(airquality['Temp'],2,max) )[c('Month', 'Day')]
#4-4
# 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
airquality['Month'==6]
#4-4
# 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
subset( airquality, Wind == apply(airquality['Wind'], 2, max) )
#4-4
# 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
subset( airquality, Month == 6)
#4-4
# 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
apply( subset( airquality, Month == 6 ), 2, max )
#4-4
# 6월달에 발생한 가장 강한 바람(Wind)의 세기 출력
apply( subset( airquality, Month == 6 ), 2, max )['Wind']
#4-5
# 7월 달의 평균 기온(Temp) 출력
subset(airquality, Month == 7)
#4-5
# 7월 달의 평균 기온(Temp) 출력
apply( subset( airquality, Month == 7), 2, mean )
#4-5
# 7월 달의 평균 기온(Temp) 출력
apply( subset( airquality, Month == 7), 2, mean )['Temp']
#4-6
# 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
subset( airquality, Ozone >= 1000)
#4-6
# 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
subset( airquality, Ozone >= 100)
#4-6
# 오존(Ozone) 농도가 100을 넘는 날은 며칠이나 되는지 출력
nrow( subset( airquality, Ozone >= 100) )
subset(state.x77, Income >= 5000)
state.x77
subset(state.x77, Income >= 5000)
subset(state.x77, 'Income' >= 5000)
class(state.x77)
subset(state.x77, 'Income' >= 5000)
subset(state.x77, Income >= 5000)
state.x77[Income >= 5000]
subset(state.x77, Income >= 5000)
st <- state.x77
subset(st, Income >= 5000)
subset(st, Income >= 5000)
st <- data.frame(state.x77)
subset(st, Income >= 5000)
state.x77
airquality
#4-1
# 이 데이터셋의 자료구조 출력
class(airquality)
subset(st, Income >= 5000)
subset(st, Income >= 5000)[c('Income', 'Population', 'Area')]
write.csv( subset(st, Income >= 5000)[c('Income', 'Population', 'Area')],
rich_state.csv
)
write.csv( subset(st, Income >= 5000)[c('Income', 'Population', 'Area')],
'rich_state.csv'
)
setwd('C:/Rstudy/work123')
write.csv( subset(st, Income >= 5000)[c('Income', 'Population', 'Area')],
'rich_state.csv'
)
ds <- read.csv('rich_state.csv')
ds
