x <- 1:4
x
y <- 5:8
y
z <- matrix( 1:20, nrow = 4, ncol = 5 )
z
m1 <- cbind( x, y )
m1
m2 <- rbind( x, y )
m2
m3 <- rbind( x, y )
m3
m4 <- cbind( x, y )
m4
z <- matrix( 1:20, nrow = 4, ncol = 5, byrow = T )  # 행우선으로 채움
z
x <- 1:4
x
y <- 5:8
y
z <- matrix( 1:20, nrow = 4, ncol = 5 )
z
m1 <- cbind( x, y )
m1
m2 <- rbind( x, y )
m2
m3 <- rbind( x, y )
m3
m4 <- cbind( x, y )
m4
x <- 1:4
x
y <- 5:8
y
z <- matrix( 1:20, nrow = 4, ncol = 5 )
z
m1 <- cbind( x, y ) # COL 변수 기준
m1
m2 <- rbind( x, y ) # ROW 관측치 기준
m2
m3 <- rbind( m2, y )
m3
m4 <- cbind( z, y )
m4
x <- 1:4
x
y <- 5:8
y
z <- matrix( 1:20, nrow = 4, ncol = 5 )
z
m1 <- cbind( x, y ) # COL 변수 기준
m1
m2 <- rbind( x, y ) # ROW 관측치 기준
m2
m3 <- rbind( m2, x )
m3
m4 <- cbind( z, x )
m4
ll 값 추출
z[ 2, 3 ]
z[ 1, 4 ]
z[ 2, ]
z[ 4 ]
z[ 2, 1:3 ]
z[ 1, c( 1, 2, 4 ) ]
z[ 1:2, ]
z[ , c( 1, 4 ) ]
z[ 2, 3 ]
z[ 1, 4 ]
z[ 2, ]
z[ 4 ]
z[ 2, 1:3 ]
z[ 1, c( 1, 2, 4 ) ]
z[ 1:2, ]
z[ , c( 1, 4 ) ]
z
z[ 2, 3 ]
z[ 1, 4 ]
z[ 2, ]
z[ 4 ]
z[ 2, 1:3 ]
z[ 1, c( 1, 2, 4 ) ]
z[ 1:2, ]
z[ , c( 1, 4 ) ]
z[ , 4 ]
# Matrix에서 행/열에 이름 지정
score <- matrix( c( 90, 85, 69, 78,
85, 96, 49, 95,
90, 80, 70, 70),
nrow = 4, ncol = 3 )
score
rownames( score ) <- c( "HONG", "KIM", "LEE", "YOO" )
colnames( score ) <- c( "ENG", "MAT", "SCI" )
score
score[ 'HONG', 'MAT' ]
score[ 'KIM', c( 'MAT', 'SCI' ) ]
score[ 'LEE', ]
score[ , 'ENG' ]
rownames( score )
colnames( score )
colnames( score )[ 2 ]
city <- c( 'SEOUL', 'TOKYO', 'WASHINGTON' )
rank <- c( 1, 3, 2 )
city.info <- data.frame( city, rank )
city.info
name <- c( 'HONG', 'KIM', 'LEE' )
age <- c( 22, 20, 25 )
gender = factor( c('M', 'F', 'M') )
blood.type = factor( c( 'A', 'O', 'B') )
person.info <- data.frame( name, age, gender, blood.type )
person.info
person2.info <- data.frame( name = c( 'HONG', 'KIM', 'LEE' ),
age = c( 22, 20, 25 ),
gender = factor( c('M', 'F', 'M') ),
blood.type = factor( c( 'A', 'O', 'B') ) )
person2.info
name <- c( 'HONG', 'KIM', 'LEE' )
age <- c( 22, 20, 25 )
gender <- factor( c('M', 'F', 'M') )
blood.type = factor( c( 'A', 'O', 'B') )
person.info <- data.frame( name, age, gender, blood.type )
person.info
person2.info <- data.frame( name <- c( 'HONG', 'KIM', 'LEE' ),
age = c( 22, 20, 25 ),
gender = factor( c('M', 'F', 'M') ),
blood.type = factor( c( 'A', 'O', 'B') ) )
person2.info
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ , c( 'SEOUL', 'WASHINGTON') ]
person2.info <- data.frame( name = c( 'HONG', 'KIM', 'LEE' ),
age = c( 22, 20, 25 ),
gender = factor( c('M', 'F', 'M') ),
blood.type = factor( c( 'A', 'O', 'B') ) )
person2.info
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ , c( 'SEOUL', 'WASHINGTON') ]
city.info
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ , c( 'SEOUL', 'WASHINGTON') ]
city.info[ c( 'SEOUL', 'WASHINGTON'),  ]
city.info
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ c( 'SEOUL', 'WASHINGTON') ]
city.info[ city.info$city, ]
city.info[ , 'rank' ]
city.info
city.info[ 1, 1 ]
city.info[ 1, ]
city.info[ , 1 ]
city.info[ city.info$city, ]
city.info[ , 'rank' ]
person.info
person.info$name
person.info[ person.info$name == 'HONG', ]
person.info[ person.info$name == 'HONG', c('name', 'age') ]
data()
iris
iris[ , c( 1:2 ) ]
iris[ , c( 1, 3, 5) ]
iris[ , c( 'Sepal.Length', 'Species') ]
iris[ 1:5, ];       iris[ 1:5, c( 1, 3 ) ]
dim( person.info )
nrow( person.info )
nrow( m3 )
ncol( person.info )
ncol( m3 )
head( iris )
tail( iris )
str( iris )
iris[ , 5 ]
unique( iris[ , 5 ] )
table( iris[, 'Species' ] )
person.info
m3
dim( person.info )
nrow( person.info )
nrow( m3 )
ncol( person.info )
ncol( m3 )
head( iris )
tail( iris )
str( iris )
iris[ , 5 ]
unique( iris[ , 5 ] )
table( iris[, 'Species' ] )
iris )
dim( iris )
str( iris )                   #
str( city.info )
str( person.info )
iris[ , 5 ]
unique( iris[ , 5 ] )
table( iris[, 'Species' ] )   #
table( person.info[ , 'blood.type' ] )
table( person.info[ , 'gender' ] )
unique( iris[ , 5 ] )
colSums( iris[ , -5 ] )       apply( iris[ , 1:4 ], 2, sum )
colMeans( iris[ , -5 ] )      apply( iris[ , 1:4], 2, mean )
rowSums( iris[ , -5 ] )       apply( iris[ , -5], 2, sum )
rowMeans( iris[ , -5 ] )      apply( iris[ , -5], 2, mean )
# 행/열 방향 전환
z <- matrix( 1:20, nrow = 4, ncol = 5 ); z
t( z )
# 조건에 맞는 행과 열의 값 추출(data frame만 가능)
IR.1 <- subset( iris, Species == 'setosa' );                      IR.1
IR.2 <- subset( iris, Sepal.Length > 5.0 & Sepal.Length > 4.0 );  IR.2
IR.2[ , c( 2, 4 ) ]
colSums( iris[ , -5 ] );       apply( iris[ , 1:4 ], 2, sum )
colMeans( iris[ , -5 ] );      apply( iris[ , 1:4], 2, mean )
rowSums( iris[ , -5 ] );       apply( iris[ , -5], 2, sum )
rowMeans( iris[ , -5 ] );      apply( iris[ , -5], 2, mean )
# 행/열 방향 전환
z <- matrix( 1:20, nrow = 4, ncol = 5 ); z
t( z )
# 조건에 맞는 행과 열의 값 추출(data frame만 가능)
IR.1 <- subset( iris, Species == 'setosa' );                      IR.1
IR.2 <- subset( iris, Sepal.Length > 5.0 & Sepal.Length > 4.0 );  IR.2
IR.2[ , c( 2, 4 ) ]
# Matrix / Data Frame 사용함수
# 행별/열별 합계와 평균 계산
colSums( iris[ , -5 ] );       apply( iris[ , 1:4 ], 2, sum )
rowSums( iris[ , -5 ] );       apply( iris[ , -5], 2, sum )
z <- matrix( 1:20, nrow = 4, ncol = 5 ); z
t( z )  # 행열 전환
IR.1 <- subset( iris, Species == 'setosa' );                      IR.1
IR.2 <- subset( iris, Sepal.Length > 5.0 & Sepal.Length > 4.0 );  IR.2
IR.2[ , c( 2, 4 ) ]
IR.1 <- subset( iris, Species == 'setosa' );                      IR.1
IR.2 <- subset( iris, Sepal.Length > 5.0 & Sepal.Width > 4.0 );  IR.2
IR.2[ , c( 2, 4 ) ]
a <- matrix( 1:20, 4, 5 );    a
b <- matrix( 21:40, 4, 5 );   b
2 * a
b - 5
2 * a + 3 * b
a + b
b - a
b / a
a * b
class( iris )
class( state.x77 )
is.matrix( iris )
is.data.frame( iris )
is.matrix( state.x77 )
is.data.frame( state.x77 )
st <- data.frame( state.x77 )
str(st)
head(st)
class(st)
iris.m <- as.matrix( iris[ , 1:4 ] )
head( iris.m )
class( iris.m )
변환
class( iris );        str( iris )
class( state.x77 )    str( state.x77 )
class( iris );        str( iris )
class( state.x77 )    str( state.x77 )
료구조 확인 / 변환
class( iris );        str( iris )
class( state.x77 );   str( state.x77 )
str(st)
head(st)
class(st)
dim(st)
iris.m <- as.matrix( iris[ , 1:4 ] )
head( iris.m )
class( iris.m )
str( iris.m )
head( st )
head( st )
Population
attach( st )
Population
detach( st )
Population
setwd( 'D:/test/work123')
air <- read.csv( 'airquality.csv', header = T )
class( air )
dim( air )
str( air )
head( air )
tail( air )
setwd( 'D:/test/work123')
air <- read.csv( 'airquality.csv', header = T, encoding = 'UTF-8' )
class( air )
dim( air )
str( air )
head( air )
tail( air )
setwd( 'D:/test/work123')
air <- read.csv2( 'airquality.csv', header = T, encoding = 'UTF-8' )  # header 있는지 없는지는 데이터보고 구분할 것.
class( air )
dim( air )
str( air )
head( air )
tail( air )
setwd( 'D:/test/work123')
air <- read.csv( 'airquality.csv', header = T, encoding = 'UTF-8' )  # header 있는지 없는지는 데이터보고 구분할 것.
class( air )
dim( air )
str( air )
head( air )
tail( air )
setwd( 'D:/test/work123')
write.csv( person.info, 'person_info.csv', row.names = F )
write.csv( person.info, 'person_info1.csv', row.names = T )
#문1)
#1-1
score = matrix( m = c(10, 40, 60, 20),
f = c(21, 60, 70, 30) )
#문1)
#1-1
score = matrix( m = c(10, 40, 60, 20),
f = c(21, 60, 70, 30), nrow = 4 )
#문1)
#1-1
score = matrix( m = c(10, 40, 60, 20),
f = c(21, 60, 70, 30), nrow = 4, ncol = 2)
#문1)
#1-1
score = matrix( c(10, 40, 60, 20,
21, 60, 70, 30),
nrow = 4, ncol = 2)
#문1)
#1-1
score = matrix( c(10, 40, 60, 20,
21, 60, 70, 30),
nrow = 4, ncol = 2)
names(score) = c( 'male', 'female' )
score
rownames(score) = c( 'male', 'female' )
#문1)
#1-1
score = matrix( c(10, 40, 60, 20,
21, 60, 70, 30),
nrow = 4, ncol = 2)
rownames(score) = c( 'male', 'female' )
colnames(score) = c( 'male', 'female' )
score
#1-3
score[2,]
#1-4
score[,'female']
#1-5
score[3,2]
#2-2
st
str(st)
#2-3
row.names(st)
#2-4
col.names(st)
#2-4
colnames(st)
#2-3
rownames(st)
#2-5
dim(st)
#2-6
str(st)
#2-7
apply(st, 1, sum)
apply(st, 2, sum)
apply(st, 2, mean)
#2-9
st['Florida', ]
#2-10
st[, 'Income' ]
#2-11
st['Texas', 'Area']
#2-12
st['Ohio', c('Population', 'Income')]
#2-13
st['Population' >= 5000]
#2-13
st[, 'Population' >= 5000]
#2-13
subset(st, Population >= 5000 )
#2-14
subset(st, Income >= 4500)
#2-14
subset(st, Income >= 4500, c('Population', 'Income', 'Area') )
#2-15
subset(st, Income >= 4500)
#2-15
ncol( subset(st, Income >= 4500) )
#2-15
nrow( subset(st, Income >= 4500) )
#2-16
subset( st, Area >=100000 & Frost >= 120 )
#2-17
subset( st, Population < 2000 & Murder < 12 )
#2-18
subset( st, Illiteracy >= 2.0, 'Income')
#2-18
apply(subset( st, Illiteracy >= 2.0, 'Income'), 2, mean)
#2-7
apply(st, 1, sum)
#2-19
abs(subset(st, Illiteracy < 2.0, 'Income'),
subset(st, Illiteracy >= 2.0, 'Income') )
#2-19
abs(subset(st, Illiteracy < 2.0, 'Income') - subset(st, Illiteracy >= 2.0, 'Income') )
#2-19
subset(st, Illiteracy < 2.0, 'Income')
#2-19
apply(subset(st, Illiteracy < 2.0, 'Income'), 2, mean)
apply(subset(st, Illiteracy >= 2.0, 'Income'), 2, mean)
#2-19
apply(subset(st, Illiteracy < 2.0, 'Income'), 2, mean)-apply(subset(st, Illiteracy >= 2.0, 'Income'), 2, mean)
#2-19
abs(apply(subset(st, Illiteracy < 2.0, 'Income'), 2, mean)-apply(subset(st, Illiteracy >= 2.0, 'Income'), 2, mean) )
#2-20
apply(st, 2, max)
#2-20
apply(st['Income'], 2, max)
#2-21
subset(st, Income > st['Pennsylvania']['Income'])
#2-21
subset(st, Income > st['Pennsylvania']['Income'], )
#2-21
subset(st, Income > st['Pennsylvania']['Income'] )
#2-21
st['Pennsylvania']['Income']
#2-21
st[Pennsylvania][Income]
#2-21
st['Pennsylvania','Income']
subset(st, Income > st['Pennsylvania','Income'] )
rownames(subset(st, Income > st['Pennsylvania','Income'] ) )
#문3)
str(mtcars)
#문3)
class(mtcars)
#3-2
dim(mtcars)
#3-3
rownames(mtcars)
#3-3
mtcars
#3-3
str(mtcars)
#3-3
colnames(mtcars)
#3-4
mtcars[mpg]
#3-4
mtcars[,mpg]
#3-4
mtcars[,'mpg']
#3-4
max(mtcars[,'mpg'])
#3-4
apply(mtcars[,'mpg'],2,max)
#3-4
apply( mtcars[,'mpg'],1,max)
#3-4
apply( mtcars[,'mpg'], 1, max)
#3-4
mtcars[,'mpg']
#3-4
apply( subset(mtcars, 'mpg'), 1, max)
#3-4
apply(mtcars['mpg'],2,max)
#2-20
apply(st['Income'], 2, max)
#2-21
rownames( subset(st, Income > st['Pennsylvania','Income'] ) )
apply(st, 2, max)
apply(st, 2, max)[Life.Exp]
subset(apply(st, 2, max)
apply(st, 2, max)
apply(st, 2, max)
#2-20
subset(st, Life.Exp == apply(st, 2, max), 'Life.Exp')
#2-20
subset(st, Life.Exp == apply(st['Life.exp'], 2, max), 'Life.Exp')
apply(st['Life.exp'], 2, max)
apply(st[,'Life.exp'], 2, max)
apply(st[Life.exp], 2, max)
apply(st[Life.Exp], 2, max)
apply(st['Life.Exp'], 2, max)
#2-20
subset(st, Life.Exp == apply(st['Life.Exp'], 2, max), 2, max), 'Life.Exp')
#2-20
subset(st, Life.Exp == apply(st['Life.Exp'], 2, max), 'Life.Exp')
#2-20
rownames(subset(st, Life.Exp == apply(st['Life.Exp'], 2, max), 'Life.Exp') )
#3-4
subset(mtcars, mpg == apply(mtcars['mpg'],2,max), 'mpg')
#3-4
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max), 'mpg') )
#3-4
rownames( subset(mtcars, mpg == apply(mtcars['mpg'],2,max)) )
#2-20
rownames(subset(st, Life.Exp == apply(st['Life.Exp'], 2, max) ) )
#3-5
subset(mtcars, gear == 4)
#3-5
apply(subset(mtcars, gear == 4), 2, min)
#3-5
subset(mtcars, gear == 4)
#3-5
subset(mtcars, gear == 4, 'mpg')
