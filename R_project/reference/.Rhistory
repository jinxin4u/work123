#                                                                 #
# 문3)                                                            #
# R에서 제공하는 mtcars 데이터셋에서                              #
# mpg와 다른 변수들 간의 상관계수를 구하시오.                     #
# 어느 변수가 mpg와 가장 상관성이 높은지 산점도와 함께 설명하시오.#
#                                                                 #
mtcars
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = cat('연비와',mtcars[,i],'의 산포도') )
}
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = mtcars[,i] )
}
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = colnames(mtcars[,i]) )
}
par( mfrow = c(1,1) )
colnames(mtcars)
colnames(mtcars[,1])
colnames(mtcars[1])
plot(mtcars[,i]~mtcars$mpg,
main = colnames(mtcars[i]) )
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = colnames(mtcars[i]) )
}
par( mfrow = c(1,1) )
cor(students)
cor(students)[1]
cor(students)[1,2]
cor(mtcars[,i]~mtcars$mpg)
cor(mtcars[1]~mtcars$mpg)
cor( mtcars[1,2]  )
mtcars[1,2]
mtcars
mtcars[1]
mtcars[c(1,3)]
cor( mtcars[c(1,2)]  )
cor( mtcars[c(1,2)]  )[1][2]
cor( mtcars[c(1,2)]  )[1,2]
abs( cor( mtcars[c(1,2)]  )[1,2] )
max = NULL
for(i in 2:10){
r <- abs( cor( mtcars[c(1,i)]  )[1,2] )
if(max <  r){
max <- r
}
}
max
max = 0
for(i in 2:10){
r <- abs( cor( mtcars[c(1,i)]  )[1,2] )
if(max <  r){
max <- r
}
}
max
par(mfrow = c(3,3))
plot(mtcars[,c(2:10)]~mtcars$mpg)
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = colnames(mtcars)[i] )
}
[i]
par(mfrow = c(3,3))
for(i in 2:10){
plot(mtcars[,i]~mtcars$mpg,
main = colnames(mtcars[i]) )
}
par( mfrow = c(1,1) )
max( abs( cor( mtcars[1,c(2:10)] )[1,2] ) )
cor( mtcars[1,2] )[1,2]
for(i in 2:10){
r <- abs( cor( mtcars[c(1,i)]  )[1,2] )
if(max <  r){
max <- r
idx <- i
}
}
idx
max = 0
idx = NULL
for(i in 2:10){
r <- abs( cor( mtcars[c(1,i)]  )[1,2] )
if(max <  r){
max <- r
idx <- i
}
}
idx
colnames(mtcars[idx])
cor( mtcars[c(1,idx)] )
# 연도를 x축으로 하여 선그래프를 작성하시오.                      #
#                                                                 #
# 연도		총인구 (천명)		연도		총인구 (천명)                   #
# 2015		51014				2021		52123                               #
# 2016		51245				2022		52261                               #
# 2017		51446				2023		52388                               #
# 2018		51635				2024		52504                               #
# 2019		51811				2025		52609                               #
# 2020		51973				2026		52704                               #
#                                                                 #
year <- c(2015,2016,2017,2018,
2019,2020,2021,2022,
2023,2024,2025,2026)
Population <- c(51014,51245,51446,51635,
51811,51973,52123,52261,
52388,52504,52609,52704)
yp <- data.frame(year,Population)
plot(yp$year~yp$Population,
main = '연도별 예상 인구수',
type = 'l')
plot(yp$Population~yp$year,
main = '연도별 예상 인구수',
type = 'l')
###################################################################
# 문5)                                                            #
# R에서 제공하는 trees 데이터셋에 대해                            #
# 다음 문제를 해결하기 위한 R 코드를 작성하시오.                  #
#                                                                 #
# (1) 나무의 지름(Girth)과 높이(Height)에 대해                    #
# 산점도와 상관계수를 보이시오.                                   #
#                                                                 #
str(trees)
###################################################################
# 문5)                                                            #
# R에서 제공하는 trees 데이터셋에 대해                            #
# 다음 문제를 해결하기 위한 R 코드를 작성하시오.                  #
#                                                                 #
# (1) 나무의 지름(Girth)과 높이(Height)에 대해                    #
# 산점도와 상관계수를 보이시오.                                   #
#                                                                 #
plot(trees$Height~trees$Girth,
main = '나무의 지름과 높이의 산점도')
lm(trees$Height~trees$Girth)
abline(treesHG)
treesHG <- lm(trees$Height~trees$Girth)
abline(treesHG)
cor(treesHG)
cor(trees)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '15')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '19')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '19')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '25')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '19')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '1')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '1')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = '2')
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19)
lines(trees)
lm(trees)
abline(trees)
treelm <- lm(trees)
abline(treelm)
cor(trees)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19)
treelm <- lm(trees)
abline(treelm)
cor(trees)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19)
cor(trees)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19, )
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19, font.labels= 10)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19, font.labels= 100)
#                                                                 #
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
#                                                                 #
pairs(trees, main = '나무의 지름, 높이, 중량 간의 산점도',
col = 'red', pch = 19, font.labels= 300)
1
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
str(ds)
ds <- data.frame(state.x77)
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
str(ds)
sum( is.na(ds))
sum( is.na(ds[1,]))
ds <- data.frame(state.x77)
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
apply(ds, 2, function(y) sum( is.na(y) ) )
ds[ !complete.cases(ds), ]
sum( rowSums(is.na(x)) > 0 )
sum( rowSums( is.na(ds) ) > 0 )
ds.new <- ds[complete.cases(ds), ]
ds[ !complete.cases(ds), ]
sum( is.na(ds) )
ds.new <- ds[complete.cases(ds), ]
ds.new
st <- data.frame(state.x77)
str(st)
par( mfrow = c(2,4) )
for(i in 1:8){
boxplot( st[,i], main = colnames(st)[i] )
}
par( mfrow = c(1,1) )
# (2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for (i in 1:8) {
outlier <- boxplot.stats(st[,i])$out
st[,i][ st[,i] %in% outlier] <- NA
}
st
# (2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for (i in 1:8) {
outlier <- boxplot.stats(st[,i])$out
st[,i][ st[,i] %in% outlier] <- NA
}
st
outlier <- boxplot.stats(st[,1])$out
st[,1][ st[,1] %in% outlier] <- NA
st
str(st)
par( mfrow = c(2,4) )
for(i in 1:8){
boxplot( st[,i], main = colnames(st)[i] )
}
ds <- data.frame(state.x77)
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
apply(ds, 2, function(y) sum( is.na(y) ) )
#
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
for ( i in 1:ncol( ds ) ) {
cat( 'column [ ', i, ' ] : ', sum( is.na( ds[ , i ] ) ), '\n' )
}
ds[ !complete.cases(ds), ]
#(2) 결측값이 포함된 행들의 데이터를 출력하시오.
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds[ idx, ]
cnt <- 0
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
cnt <- cnt + 1
}
}
cnt
sum( rowSums( is.na(ds) ) > 0 )
idx <- c()
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
idx <- c( idx, i )
}
}
ds.new <- ds[ -idx, ]
ds.new
st <- data.frame(state.x77)
str(st)
par( mfrow = c(2,4) )
for(i in 1:8){
boxplot( st[,i], main = colnames(st)[i] )
}
#
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st[, 1 ] )     # 특이값 있음
boxplot( st[, 2 ] )     # 특이값 있음
boxplot( st[, 3 ] )     # 특이값 없음
boxplot( st[, 4 ] )     # 특이값 없음
boxplot( st[, 5 ] )     # 특이값 없음
boxplot( st[, 6 ] )     # 특이값 없음
boxplot( st[, 7 ] )     # 특이값 없음
boxplot( st[, 8 ] )     # 특이값 있음
boxplot( st[,c(1,8)], main = colnames(st)[c(1,8)] )
for(i in 1:8){
boxplot( st[,i], main = colnames(st)[i] )
}
par( mfrow = c(2,4) )
for(i in 1:8){
boxplot( st[,i], main = colnames(st)[i] )
}
# (2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for (i in 1:8) {
outlier <- boxplot.stats(st[,i])$out
st[ st[,i] %in% outlier] <- NA
}
st2 <- st[complete.cases(st),]
source('D:/work123/R_report/KimShinHyeok_191205.R', encoding = 'UTF-8', echo=TRUE)
st[ st[,i] %in% outlier, i] <- NA
st
st2 <- st[complete.cases(st),]
st2
# (4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[ complete.cases(AQ), ]
AQ <- data.frame(airquality)
apply(AQ, 2, function(y) sum( is.na(y) ) )
sum( rowSums( is.na(AQ) > 0 ) )
# (4) AQ에서 NA를 포함하지 않은 행들만 출력하시오.
AQ[ complete.cases(AQ), ]
# (5) AQ에서 NA를 NA가 속한 열의 평균값으로 치환하여 AQ2로 저장하고, AQ2의 내용을
# 출력하시오.
AQ[!complete.cases(AQ), ]
mean.value <- apply( AQ[complete.cases(AQ), ], 2, mean )
mean.value
for(i in 1:6){
AQ[ is.na(AQ[,i]), ] <- mean.value[i]
}
AQ
head(state.x77)
# 문4)
# R에서 제공하는 state.x77 데이터셋에 대하여 다음 문제를 해결하기 위한
# R 코드를 작성하시오.
#
# (1) state.x77 데이터셋을 Population(인구수)를 기준으로 오름차순 정렬하시오.
library(dplyr)
head(state.x77)
st.df <- data.frame(state.x77)
st.df %>% arrange(Population) %>%
head
tmp <- state.x77[ order( state.x77[ , 'Illiteracy' ] ), ]
tmp[ 1:10, 'Illiteracy' ]
#문5)
#R에서 제공하는 mtcars 데이터셋에 대하여 다음 문제를 해결하기 위한 R
#코드를 작성하시오.
#
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하
#시오.(단, split() 함수를 사용)
mt.gear <- split( mtcars, mtcars$gear )
mt.gear
st
#문2)
#다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기
#위한 R 코드를 작성하시오.
#
st <- data.frame(state.x77)
#
#(1) st의 각 변수(열)들에 대해 특이값이 존재하는지 상자그림을 그려 확인하시오.
boxplot( st[, 1 ] )     # 특이값 있음
boxplot( st[, 2 ] )     # 특이값 있음
boxplot( st[, 3 ] )     # 특이값 없음
boxplot( st[, 4 ] )     # 특이값 없음
boxplot( st[, 5 ] )     # 특이값 없음
boxplot( st[, 6 ] )     # 특이값 없음
boxplot( st[, 7 ] )     # 특이값 없음
boxplot( st[, 8 ] )     # 특이값 있음
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
#문2)
#다음과 같이 state.x77 데이터셋을 st에 저장한 후 다음 문제를 해결하기
#위한 R 코드를 작성하시오.
#
st <- data.frame(state.x77)
st
#(2) 특이값이 존재하는 경우 이상치를 NA로 대체하여 저장하시오.
for ( i in 1:ncol( st ) ) {
outlier <- boxplot.stats( st[ , i ] )$out
if ( length( outlier ) > 0 ) {
st[ st[ , i ] %in% outlier, i ] <- NA
}
}
st
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx('korea_population.xlsx')
library('rJava')
library('xlsx')
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx('korea_population.xlsx')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_CCTV1 <- read.xlsx(file = 'korea_cctv.xls', sheetIndex = 1, encoding = 'UTF-8')
Korea_CCTV1
Korea_CCTV1
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1
Korea_Population
Korea_Population
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_Population
View(income_4500)
library('rJava')
library('xlsx')
setwd('D:/work123/R_Project/reference')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1
df
Crim_Area <- read.csv(file = 'crim_area.csv', header = TRUE, encoding = 'UTF-8')
Crim_Area
Crim_Area[1]
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1
Crim_Area <- read.csv(file = 'crim_area.csv', header = TRUE, encoding = 'UTF-8')
Crim_Area
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1
Korea_CCTV2 <- read.csv(file = 'korea_cctv2.csv', header = TRUE, encoding = 'UTF-8')
install.packages('dplyr')
library('dplyr')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = TRUE, encoding = 'UTF-8')
Korea_CCTV1 <- read.xlsx(file = 'korea_cctv1.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_CCTV1 <- read.xlsx(file = 'korea_cctv1.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_CCTV1
Korea_CCTV1 <- read.xlsx(file = 'korea_cctv1.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Crim_Evidence <- read.csv(file = 'evidence.csv', header = TRUE, encoding = 'UTF-8')
Crim_Evidence
Crim_Evidence <- read.xlsx(file = 'evidence.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Crim_Evidence
Crim_Evidence <- read.csv(file = 'evidence.csv', header = TRUE, encoding = 'UTF-8')
Crim_Evidence
Crim_Evidence <- read.csv(file = 'evidence.csv', header = T, encoding = 'UTF-8')
Crim_Evidence
Korea_Population
Korea_CCTV1 <- read.csv(file = 'korea_cctv1.csv', header = T, encoding = 'UTF-8')
Korea_Population
Korea_CCTV <- read.xlsx(file = 'korea_cctv.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population <- read.xlsx(file = 'korea_population.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
Korea_CCTV <- read.xlsx(file = 'korea_cctv.xlsx', sheetIndex = 1, encoding = 'UTF-8')
Korea_Population
