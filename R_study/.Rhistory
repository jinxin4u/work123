#
# 6일차 다변량(다중변수) 연속형 data 분석 실습
#
#문1)
#다음은 직장인 10명의 수입과 교육받은 기간을 조사한 자료이다. 산점도와 상관계수를 구하고,
#수입과 교육기간 사이에 어떤 상관관계가 있는지 설명하시오.
#
#수입 	 121 99 41 35 40 29 35 24 50 60
#교육기간 19  20 16 16 18 12 14 12 16 17
income <- c( 121, 99, 41, 35, 40, 29, 35, 24, 50, 60 )
period <- c( 19, 20, 16, 16, 18, 12, 14, 12, 16, 17 )
tbl <- data.frame( income, period )
tbl
plot( income~period, data = tbl )
res <- lm( income~period, data = tbl )
abline( res )
cor( income, period )
#문2)
#다음은 대학생 10명의 성적과 주당 TV 시청시간을 조사한 자료이다. 산점도와 상관계수를 구하고,
#성적과 TV 시청시간 사이에 어떤 상관관계가 있는지 설명하시오.
#
#성적 	 77.5 60 50 95 55 85 72.5 80 92.5 87.5
#시청시간 14   10 20  7 25  9 15   13  4   21
score <- c( 77.5, 60, 50, 95, 55, 85, 72.5, 80, 92.5, 87.5 )
tv <- c( 14, 10, 20, 7, 25, 9, 15, 13, 4, 21 )
tbl <- data.frame( score, tv )
tbl
plot( score~tv, data = tbl )
res <- lm( score~tv, data = tbl )
abline( res )
cor( score, tv )
#문3)
#R에서 제공하는 mtcars 데이터셋에서 mpg와 다른 변수들 간의 상관계수를
#구하시오. 어느 변수가 mpg와 가장 상관성이 높은지 산점도와 함께 설명하시오.
head( mtcars )
cor( mtcars )
cor( mtcars )[ 1, ]
#다음은 2015년부터 2026년도까지의 예상 인구수 추계자료이다. 연도를 x
#축으로 하여 선그래프를 작성하시오.
#
#연도		총인구 (천명)		연도		총인구 (천명)
#2015		51014				2021		52123
#2016		51245				2022		52261
#2017		51446				2023		52388
#2018		51635				2024		52504
#2019		51811				2025		52609
#2020		51973				2026		52704
year <- 2015:2026
pop <- c( 51014, 51245, 51446, 51635, 51811, 51973, 52123, 52261, 52388, 52504, 52609, 52704 )
plot( year, pop, type = 'l', main = '인구수 추계' )
pop <- c( 51014, 51245, 51446, 51635, 51811, 51973, 52123, 52261, 52388, 52504, 52609, 52704 )
plot( year, pop, type = 'p', main = '인구수 추계' )
plot( year, pop, type = 'l', main = '인구수 추계' )
class( trees )
dim( trees )
str( trees )
head( trees )
tail( trees )
tbl <- data.frame( trees$Girth, trees$Height )
tbl
plot( trees$Girth, trees$Height )
plot( trees.Girth~trees.Height, data = tbl )
res <- lm( trees.Girth~trees.Height, data = tbl )
abline( res )
#(2) trees 데이터셋에 존재하는 3개 변수 간의 산점도와 상관계수를 보이시오.
plot( trees )
pairs( trees )
cor( trees )
z <- c(1,2,3,NA,5,NA,8)
sum(z)
is.na(z)
sum( is.na(z) )
sum( z, na.rm = TRUE )
sum(z)
is.na(z)
sum( z, na.rm = TRUE )  #
# 결측치 대체 및 제거
z1 <- z
z2 <- c(5,8,1,NA,3,NA,7)
Z1[ is.na( z1 ) ] <- 0
z1
# 결측치 대체 및 제거
z1 <- z
z2 <- c(5,8,1,NA,3,NA,7)
### 단순대입법
z1[ is.na( z1 ) ] <- 0
z1
### Listwise delection
z3 <- as.vector( na.omit( z2 ) ) # omit :
z3
ris
x[1,2] <- NA
x[1,3] <- NA
x[2,3] <- NA
x[3,4] <- NA
head(x
x / Data Frame 결측치 처리
x <- iris
x[1,2] <- NA
x[1,3] <- NA
x[2,3] <- NA
x[3,4] <- NA
head(x)
# Matrix / Data Frame 열별 결측치 확인
# case 1 : 반복문 이용
for(i in 1:ncol(x)){
this.na <- is.na( x[,i] )
cat( colnames(x)[i], '\t', sum(this.na), '\n' )
}
barplot( na_cnt[ na_cnt > 0 ] )
# case 2 : apply() 이용
col_na <- function( y ){
return ( sum( is.na(y) )  )
}
na_cnt <- apply(x,2,col_na) # na_cnt <- apply(x,2,function(y) sum(is.na(y)) )     ## 익명 함수
na_cnt
barplot( na_cnt[ na_cnt > 0 ] )
install.packages('VIM')
require(VIM)
# 결측치 자료 조합 확인용 시각화 도구
aggr( x, prop = FALSE, numbers = TRUE )
# 결측치 자료 조합 확인용 시각화 도구
aggr( x, prop = TRUE, numbers = TRUE )
FALSE
# 결측치 자료 조합 확인용 시각화 도구
aggr( x, prop = FALSE, numbers = TRUE )
# 두 개의 변수 간의 결측치 관계 확인 시각화 도구
marginplot( x[c('Sepal.Width','Petal.Width')],
pch = 20,
col = c( 'darkgray', 'red', 'blue' ) )
# 두 개의 변수 간의 결측치 관계 확인 시각화 도구
marginplot( x[c('Sepal.Width','Sepal.Length')],
pch = 20,
col = c( 'darkgray', 'red', 'blue' ) )
# Matrix / Data Frame의 행(data)별 결측치 확인
rowSums( is.na(x) )
sum( rowSums(is.na(x)) > 0 )
sum( is.na(x) )
# 결측치 자료 조합 확인용 시각화 도구
aggr( x, prop = FALSE, numbers = TRUE )
# 두 개의 변수 간의 결측치 관계 확인 시각화 도구
marginplot( x[c('Sepal.Width','Sepal.Length')],
pch = 20,
col = c( 'darkgray', 'red', 'blue' ) )
head(x)
x[ !complete.cases(x), ]  # NA가 포함된 행출력
y <- x[ complete.cases(x), ]
head(y)
x[ !complete.cases(x), ]  # NA가 포함된 행출력
# 특이값, 이상치( outlier )
st <- data.frame( state.x77 )
summary( st$Income )
boxplot( st$Income )
boxplot.stats( st$Income )$out
#
# 데이터 가공
#
# 데이터 정렬
# Vector 정렬
v1 <- c(1,7,6,8,4,2,3)
order(v1)
v1 <- sort(v1)
v1
v2 <- sort(v1, decreasing = TRUE )
v2
# Matrix / Data Frame 정렬
head( iris )
order( iris$Sepal.Length )
iris[ order(iris$Sepal.Length), ]                     #Ascending
iris[ order(iris$Sepal.Length, decreasing = TRUE), ]  #Decreasing
iris.new <- iris[ order( iris$Sepal.Length ), ]
head(iris.new)
iris[ order( iris$Species, decreasing = TRUE,
iris$Sepal.Length ), ]                   # 정렬 기준 다중 설정
# Matrix / Data Frame 정렬
head( iris )
order( iris$Sepal.Length )
iris[ order(iris$Sepal.Length), ]                     #Ascending
iris[ order(iris$Sepal.Length, decreasing = TRUE), ]  #Decreasing
# 데이터 분리
sp <- split( iris, iris$Species )
sp
summary(sp)
sp$setosa
summary(sp$setosa)
# 데이터 선택
subset(iris, Species == 'setosa')
subset(iris, Sepal.Length > 7.5)
subset(iris, Sepal.Length > 5.1 & Sepal.Width > 3.9 )
subset(iris, Sepal.Length > 7.6,
select = c( Petal.Length, Petal.Width ) )
x <- 1:100
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
y <- sample(x,size=10,replace = FALSE)#size: 뽑아낼 갯수, replace : 복원/비복원 추출
y
# 행 추출
idx <- sample( 1:nrow(iris), size=50, replace = FALSE)
iris.50 <- iris[idx, ]
dim(iris.50)
head(iris.50)
sample(1:20, size = 5)
sample(1:20, size = 5)
sample(1:20, size = 5)
sample(1:20, size = 5)
sample(1:20, size = 5)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
# 데이터 조합
combn( 1:5, 3 )
x = c('red','green','blue','black','white')
com <- combn(x,2)
com
for(i in i:ncol(com) ){
cat(com[,i], '\n')
}
# 데이터 집계 :     p1 : 집계 대상, by : 집계 기준, FUN : oper
agg <- aggregate( iris[,-5],
by = list(iris$Species),
FUN = mean )
agg
agg <- aggregate( iris[,-5],
by = list(iris$Species),
FUN = sd )
agg
head(mtcars)
agg <- aggregate( mtcars,
by = list( cyl = mtcars$cyl,
vs = mtcars$vs ),
FUN = max )
agg
x <- data.frame( name = c('a','b','c'),
mat = c(90,80,40) )
y <- data.frame( name = c('a','b','d'),
korean = c(75,60,90) )
z <- merge( x, y, by = c('name') )
z
merge(x,y)
merge(x,y, all.x = TRUE)
merge(x,y, all.y = TRUE)
merge(x,y, all = TRUE)
x <- data.frame( name = c('a','b','c'),
mat = c(90,80,40) )
y <- data.frame( sname = c('a','b','d'),
korean = c(75,60,90) )
merge(x,y,by.x = c('name'),
by.y = c('sname'))
#
# dplyr package
#
install.packages('dplyr')
library(dplyr)
setwd("D:/workR")
setwd('D:/work123/R_study')
df <- data.frame( var1 = c(1,2,1),
var2 = c(2,3,2) )
df
# rename() : 이름변경
df <- rename(df, v1 = var1, v2 = var2)
df
# 파생변수 추가
df$sum <- df$v1 + df$v2
df
df[2,1] <- 5
df
df <- data.frame(id = c(1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c(50,60,45,30,25,50),
eng = c(98,97,86,98,80,89),
sci = c(50,60,78,58,65,98))
df
df %>% filter(class == 1)
df %>% filter(class != 1)
df %>% filter(class != 2)
df %>% filter(class == 2)
df %>% filter(sci > 70)
df %>% filter(math < 50)
df %>% filter(class == 1 & math >= 50)
df %>% filter(math >= 50 | eng >= 90 )
df %>% filter(class %in% c(1,3,5) )
class1 <- df %>% filter(class == 1)
df <- data.frame(id = c(1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c(50,60,45,30,25,50),
eng = c(98,97,86,98,80,89),
sci = c(50,60,78,58,65,98))
df
#  L pipe R  -> 방향으로 pipe를 여러개 붙일 수도 있다
df %>% filter(class == 1)
df %>% filter(class == 2)
df %>% filter(class != 1)
df %>% filter(class != 2)
df %>% filter(sci > 70)
df %>% filter(math < 50)
df %>% filter(class == 1 & math >= 50)
df %>% filter(math >= 50 | eng >= 90 )
df %>% filter(class %in% c(1,3,5) )
class1 <- df %>% filter(class == 1)
class2 <- df %>% filter(class == 2)
class1
class2
# select() : 변수 추출
df %>% select(math)
df %>% select(sci)
df %>% select(class, math, sci)
df %>% select(-math)
df %>% select(-math) %>% filter(class==1)
# dplyr 함수 조합
df %>%
filter( class == 1 ) %>%
select( sci )
df %>%
select( id, sci ) %>%
head
# arrange() : 정렬
df %>% arrange( sci )
df %>% arrange( desc(sci) )
# arrange() : 정렬
df %>% arrange( sci )
df %>% arrange( desc(sci) )
# mutate() : 파생변수 추가
df %>%
mutate( total = math + eng + sci ) %>%
head
df %>%
mutate( total = math + eng + sci,
average = (math + eng + sci)/3 ) %>%
head
df %>%
mutate( grade = ifelse( sci >= 60, 'pass', 'fail' ) ) %>%
head
df %>%
mutate( total = math + eng + sci,
average = (math + eng + sci)/3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average < 60, 'fail', 'normal') ) ) %>%
head
df %>%
mutate( total = math + eng + sci,
average = (math + eng + sci)/3 ) %>%
arrange( desc(average) ) %>%
head
df.sort <- df %>%
mutate( total = math + eng + sci,
average = (math + eng + sci)/3 ) %>%
arrange( desc(average) )
df.sort
# summarise() : 집단별 요약
# group_by() :  집단별 나누기
df %>% summarise( mean_math = mean(math))
df %>%
group_by(class) %>%
summarise( mean_math = mean(math),
mean_eng = mean(eng),
mean_sci = mean(sci),
n = n() )
install.packages('ggplot2')
str( ggplot2::mpg )
mpg <- data.frame( ggplot2::mpg )
dim(mpg)
str(mpg)
head(mpg)
View(mpg)
View(res)
View(mpg)
View(iris.new)
View(mpg)
View(myds)
View(pop_5000)
View(res)
View(sp)
View(mpg)
View(iris.2)
View(iris.50)
mpg %>%
group_by( manufacturer, drv ) %>%
summarise( mean_cty = mean(cty) ) %>%
head(10)
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'sub') %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot ) ) %>%
head(5)
mpg %>%
group_by( manufacturer ) %>%
filter( class == 'suv') %>%
mutate( tot = (cty + hwy) / 2 ) %>%
summarise( mean_tot = mean(tot) ) %>%
arrange( desc( mean_tot ) ) %>%
head(5)
# 데이터 병합
# left_join() : 가로로 합치기(변수 추가)
# inner_join() :            "
# full_join() :             "
# bind_rows() : 세로로 합치기(Data 추가)
df1 <- data.frame( id = c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
df2 <- data.frame( id = c(1,2,3,4,5),
final = c(60,80,70,90,85))
tot <- left_join(df1,df2, by='id')
tot
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsFactors = 'F')
df1 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
df1
df2
df1
df2
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsFactors = 'F')
df2 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
df1
df2
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsFactors = FALSE)
df2 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
df1
df2
str(df1)
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsFactors = F)
df1
df_left <- left_join(df1,df2,by='id')
df_left
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsAsFactors = F)
df2 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
df1
df2
str(df1)
df_left <- left_join(df1,df2,by='id')
df_left
df_inner <- inner_join(df1,df2,by='id')
df_inner
df_full <- full_join(df1,df2, by='id')
df_full
str(df1)
df1 <- data.frame( id = c(1,2,3,4,5),
test = c(60,80,70,90,85))
df2 <- data.frame( id = c(1,2,3,4,5),
test = c(60,80,70,90,85))
df_all <- bind_rows(df1, df2)
df_all
df1 <- data.frame( id = c(1,2,3),
address = c('서울','부산','제주'),
stringsAsFactors = F)
df2 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
df1
str(df1)
df_left <- left_join(df1,df2,by='id')
df_left
install.packages('psych')
library(psych)
summary(mtcars)
describe(mtcars)
df2 <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
table(df$gender)
df <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
table(df$gender)
table( df$gender )
freq( df$gender )
install.packages('descr')
require(descr)
df <- data.frame( id = c(1,2,4),
gender = c('남','여','남') )
table( df$gender )
freq( df$gender )
freq( df$gender, plot = FALSE)
freq( df$gender )
freq( df$gender, plot = FALSE)
freq( df$gender, plot = F)
freq( df$gender )
freq( df$gender, plot = F)
